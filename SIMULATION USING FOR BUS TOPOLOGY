#Create a simulator object
set ns [new Simulator]

#Define different colors for data flows (for NAM)
$ns color 1 Blue
$ns color 2 Green
$ns color 3 Red
$ns color 4 Yellow

#Open the NAM trace file
set nf [open bus.nam w]
$ns namtrace-all $nf 

#Define a 'finish' procedure
proc finish {} { global ns nf
$ns flush-trace
close $nf
exec nam bus.nam &
exit 0
}

#Create Eleven nodes
set n0 [$ns node] 
set n1 [$ns node] 
set n2 [$ns node] 
set n3 [$ns node]
set n4 [$ns node] 
set n5 [$ns node] 
set n6 [$ns node] 
set n7 [$ns node] 
set n8 [$ns node] 
set n9 [$ns node] 
set n10 [$ns node]

#Create links between the nodes
$ns duplex-link $n0 $n1 2.9Mb 10ms DropTail
$ns duplex-link $n1 $n2 2Mb 20ms DropTail
$ns duplex-link $n2 $n3 2Mb 20ms DropTail
$ns duplex-link $n2 $n4 1.9Mb 10ms DropTail
$ns duplex-link $n4 $n5 2.7Mb 10ms DropTail
$ns duplex-link $n4 $n6 2.4Mb 10ms DropTail
$ns duplex-link $n6 $n7 2Mb 10ms DropTail
$ns duplex-link $n6 $n8 2.3Mb 10ms DropTail
$ns duplex-link $n6 $n9 1.9Mb 10ms DropTail
$ns duplex-link $n9 $n10 3.9Mb 10ms DropTail

#Set Queue Size of link (n2-n4),(n6-n8) to 3
$ns queue-limit $n2 $n4 3
$ns queue-limit $n6 $n8 3

#Give node position (for NAM)
$ns duplex-link-op $n0 $n1 orient down
$ns duplex-link-op $n1 $n2 orient right
$ns duplex-link-op $n2 $n3 orient down
$ns duplex-link-op $n2 $n4 orient right
$ns duplex-link-op $n4 $n5 orient up
$ns duplex-link-op $n4 $n6 orient right
$ns duplex-link-op $n6 $n7 orient up
$ns duplex-link-op $n6 $n8 orient down
$ns duplex-link-op $n6 $n9 orient right
$ns duplex-link-op $n9 $n10 orient up

#Monitor the queue for link (n2-n4),(n6-n8). (for NAM)
$ns duplex-link-op $n2 $n4 queuePos 0.5
$ns duplex-link-op $n6 $n8 queuePos 0.5

#Setup a TCP1 connection
set tcp1 [new Agent/TCP]
$tcp1 set class_ 1
$ns attach-agent $n0 $tcp1 
set sink1 [new Agent/TCPSink]
$ns attach-agent $n5 $sink1
$ns connect $tcp1 $sink1
$tcp1 set fid_ 1

#Setup a TCP2 connection
set tcp2 [new Agent/TCP]
$tcp1 set class_ 2
$ns attach-agent $n2 $tcp2
set sink2 [new Agent/TCPSink]
$ns attach-agent $n8 $sink2
$ns connect $tcp2 $sink2
$tcp2 set fid_ 2

#Setup a FTP1 over TCP1 connection
set ftp1 [new Application/FTP]
$ftp1 attach-agent $tcp1
$ftp1 set type_ FTP

#Setup a FTP2 over TCP2 connection
set ftp2 [new Application/FTP]
$ftp2 attach-agent $tcp2
$ftp2 set type_ FTP

#Setup a UDP1 connection
set udp1 [new Agent/UDP]
$ns attach-agent $n3 $udp1
set null1 [new Agent/Null]
$ns attach-agent $n7 $null1
$ns connect $udp1 $null1
$udp1 set fid_ 3

#Setup a UDP2 connection
set udp2 [new Agent/UDP]
$ns attach-agent $n1 $udp2 
set null2 [new Agent/Null]
$ns attach-agent $n10 $null2
$ns connect $udp2 $null2
$udp1 set fid_ 4

#Setup a CBR1 over UDP1 connection
set cbr1 [new Application/Traffic/CBR]
$cbr1 attach-agent $udp1
$cbr1 set type_ CBR
$cbr1 set packet_ size_ 1000
$cbr1 set rate_ 1mb
$cbr1 set random_ false

#Setup a CBR2 over UDP2 connection
set cbr2 [new Application/Traffic/CBR]
$cbr2 attach-agent $udp2
$cbr2 set type_ CBR
$cbr2 set packet_ size_ 1000
$cbr2 set rate_ 1mb
$cbr2 set random_ false

#Schedule events for the CBR and FTP agents
$ns at 0.1 "$ftp1 start"
$ns at 0.2 "$cbr1 start"
$ns at 0.3 "$ftp2 start"
$ns at 0.5 "$cbr2 start"
$ns at 1.7 "$ftp1 stop"
$ns at 1.9 "$cbr1 stop"
$ns at 2.0 "$ftp1 stop"
$ns at 2.4 "$cbr1 stop"

#Call the finish procedure after 5 seconds of simulation time
$ns at 2.5 "finish"

#Print CBR packet size and interval
puts "CBR packet size=[$cbr1 set packet_size_]" puts "CBR interval=[$cbr1 set interval_]"
puts "CBR packet size=[$cbr2 set packet_size_]" puts "CBR interval=[$cbr2 set interval_]"

#Run the simulation
$ns run
